## 解法一：先序遍历

* 

```
public class Codec {
    String SEP = ",";
    String NULL = "#";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder builder = new StringBuilder();
        return serialize(root,builder).toString();
    }

    StringBuilder serialize(TreeNode root,StringBuilder builder) {
        if(root == null) {
            builder.append(NULL).append(SEP);
            return builder;
        }
        //前序遍历位置
        builder.append(root.val).append(SEP);
        serialize(root.left,builder);
        serialize(root.right,builder);
        return builder;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        LinkedList<String> nodes = new LinkedList();
        for(String node : data.split(SEP)) {
            nodes.addLast(node);
        }
        return deserialize(nodes);      
    }

    TreeNode deserialize(LinkedList<String> nodes) {
        if(nodes.isEmpty()) {
            return null;
        }
        //移除列表中的父节点
        String item = nodes.removeFirst();
        if(NULL.equals(item)) {
            return null;
        }
        //构建父节点
        TreeNode root = new TreeNode(Integer.parseInt(item));
        //序列化其左右子节点
        root.left = deserialize(nodes);
        root.right = deserialize(nodes);
        return root;
    }
}
```

## 解法二：后序遍历

* 

```
public class Codec {
    String NULL = "#";
    String SEP = ",";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder builder = new StringBuilder();
        return serialize(root,builder).toString();
    }

    StringBuilder serialize(TreeNode root,StringBuilder builder) {
        if(root == null) {
            builder.append(NULL).append(SEP);
            return builder;
        }
        serialize(root.left,builder);
        serialize(root.right,builder);
        //后序遍历位置
        builder.append(root.val).append(SEP);
        return builder;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        LinkedList<String> nodes = new LinkedList();
        for(String node : data.split(SEP)) {
            nodes.addLast(node);
        }
        return deserialize(nodes);
    }

    TreeNode deserialize(LinkedList<String> nodes) {
        if(nodes.isEmpty()) {
            return null;
        }
        //移除列表尾部的父节点
        String node =  nodes.removeLast();
        if(NULL.equals(node)) {
            return null;
        }
        //构建父节点
        TreeNode root = new TreeNode(Integer.parseInt(node));
        // [left...right...root]    需要从后往前构造
        //  left<--right<--root
        //先构造右子树
        root.right = deserialize(nodes);
        //再构造左子树
        root.left = deserialize(nodes);
        return root;
    }
}
```

## 题解三：层序遍历

* 

```
public class Codec {
    String NULL = "#";
    String SEP = ",";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        //层序遍历BFS的模板
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        StringBuilder builder = new StringBuilder();
        while(!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if(node == null) {
                builder.append(NULL).append(SEP);
                continue;
            }
            builder.append(node.val).append(SEP);
            queue.add(node.left);
            queue.add(node.right);
        }
        return builder.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Queue<TreeNode> queue = new LinkedList();
        String[] nodes = data.split(SEP);
        if(NULL.equals(nodes[0])) {
            return null;
        }
        TreeNode root = new TreeNode(Integer.parseInt(nodes[0]));
        queue.add(root);
        //[1,    2,3,  4,5,6,7]
        //[第一层|第二层|第三层]
        //通过索引控制队列中的父节点的子节点
        //例如根节点为root，索引为0，其子节点索引为1和2 于是从索引值为1的结点开始遍历
        for(int i=1;i<nodes.length;) {
            TreeNode node = queue.poll();
            String left = nodes[i++];
            if(!NULL.equals(left)) {
                node.left = new TreeNode(Integer.parseInt(left));
                queue.add(node.left);
            }
            String right = nodes[i++];
            if(!NULL.equals(right)) {
                node.right = new TreeNode(Integer.parseInt(right));
                queue.add(node.right);
            }
        }
        return root;
    }
}
```

