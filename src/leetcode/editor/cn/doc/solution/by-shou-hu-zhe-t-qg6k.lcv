### 解题思路

1. 枚举全部料理的所有子集
2. 当调料子集的，当前饱腹感超过limit时，判断所消耗材料是否超出原有材料
3. 简单版本的题目：https://leetcode-cn.com/problems/subsets/

### 代码

* java

```java
class Solution {
    int[] materials;
	int[][] cookbooks, attribute;
	int limit, ans = -1;
	List<Integer> list = new ArrayList<>();
	public int perfectMenu(int[] materials, int[][] cookbooks, int[][] attribute, int limit) {
		this.materials = materials;
		this.cookbooks = cookbooks;
		this.attribute = attribute;
		this.limit = limit;
		dfs(0, 0, 0, new int[5]);
		return ans;
	}

	/**
	 * 
	 * @param index  表示当前为第几种料理
	 * @param l 当前的饱腹感
	 * @param s 当前的美味度
	 * @param ma  保存当前所消耗的原材料	
	 */
	private void dfs(int index, int l, int s, int[] ma) {

		if (l >= limit) {
			boolean f=true;
			for (int i = 0; i < ma.length&&f; i++) {//判断所消耗材料是否超出原有材料
				if (ma[i] > materials[i]) f=false;
			}
			if(f) ans = Math.max(ans, s);
		}
		for (int i = index; i < attribute.length; i++) {
			//attribute[i] = [x,y] 表示第 i 道料理的美味度 x 和饱腹感 y。
			int x = attribute[i][0], y = attribute[i][1];
			list.add(i);
			for (int t = 0; t < ma.length; t++) {
				ma[t]+=cookbooks[i][t];
			}
			dfs(i + 1, l + y, x + s, ma);// 如果以index递归进去，则有大量重复的数据
			int tmp = list.get(list.size() - 1);
			list.remove(list.size() - 1);//回溯
			for (int t = 0; t < ma.length; t++) {
				ma[t]-=cookbooks[tmp][t];//回溯
			}
		}
	}
}
```

执行性能：
![image.png](https://pic.leetcode-cn.com/1650118995-mHQJMH-image.png)
